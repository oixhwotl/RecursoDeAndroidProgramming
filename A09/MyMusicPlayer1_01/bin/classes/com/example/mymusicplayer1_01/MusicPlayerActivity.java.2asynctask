package com.example.mymusicplayer1_01;

import java.util.Locale;

import android.app.Activity;
import android.media.AudioManager;
import android.media.MediaPlayer;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.Toast;

public class MusicPlayerActivity extends Activity implements
		MediaPlayer.OnCompletionListener {
	private static final String TAG = "MusicPlayerActivity";

	private MediaPlayer mMediaPlayer;
	private boolean mMediaPlayerIsPlaying;
	private boolean mMediaPlayerIsLooping;
	private int mMediaPlayerTotalDuration;
	private int mMediaPlayerCurrentPosition;

	private TextView mTextViewTitle, mTextViewTimeProgress, mTextViewTimeTotal;
	private void updateTimeProgress() {
		mMediaPlayerCurrentPosition = mMediaPlayer.getCurrentPosition();
		mTextViewTimeProgress.setText(timeToString(mMediaPlayerCurrentPosition));
	}

	private ImageButton mButtonPlayPause, mButtonStop, mButtonRewind,
			mButtonFastForward, mButtonReplay;
	private View.OnClickListener mButtonPlayPauseClickListener = new View.OnClickListener() {
		@Override
		public void onClick(View v) {
			mMediaPlayerIsPlaying = mMediaPlayer.isPlaying();
			try {
				if (mMediaPlayerIsPlaying) {
					Log.v(TAG, "Play clicked > Play");
					mMediaPlayer.pause();
					mMediaPlayerIsPlaying = false;
					
					cancelUpdateTimeProgressAsyncTask();
				} else {
					Log.v(TAG, "Pause clicked > Pause");
					mMediaPlayer.start();
					mMediaPlayerIsPlaying = true;
					
					createUpdateTimeProgressAsyncTask();
				}
				updatePlayPauseButtonImage();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	};

	private void updatePlayPauseButtonImage() {
		mMediaPlayerIsPlaying = mMediaPlayer.isPlaying();
		if (mMediaPlayerIsPlaying == true) {
			mButtonPlayPause.setImageResource(R.drawable.ic_action_pause);
		} else {
			mButtonPlayPause.setImageResource(R.drawable.ic_action_play);
		}
	}

	private View.OnClickListener mButtonStopClickListener = new View.OnClickListener() {
		@Override
		public void onClick(View v) {
			mMediaPlayerIsPlaying = mMediaPlayer.isPlaying();
			try {
				Log.v(TAG, "Stop clicked > Stop playing");
				if (mMediaPlayerIsPlaying) {
					mMediaPlayer.pause();
					updatePlayPauseButtonImage();
					cancelUpdateTimeProgressAsyncTask();
				}
				else
				{
					Log.v(TAG, "Stop clicked > Stop");
				}
				mMediaPlayer.seekTo(0);
				
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	};
	
	private View.OnClickListener mButtonReplayClickListener = new View.OnClickListener() {
		@Override
		public void onClick(View v) {
			mMediaPlayerIsLooping = mMediaPlayer.isLooping();
			mMediaPlayerIsLooping = !mMediaPlayerIsLooping;
			if (mMediaPlayerIsLooping){
				Log.v(TAG, "Replay clicked > Looping");
			} else {
				Log.v(TAG, "Replay clicked > not looping");
			}
			mMediaPlayer.setLooping(mMediaPlayerIsLooping);
			updateReplayButtonImage();
		}
	};
	private void updateReplayButtonImage() {
		mMediaPlayerIsLooping = mMediaPlayer.isLooping();
		if (mMediaPlayerIsLooping == true) {
			mButtonReplay.setImageResource(R.drawable.ic_action_replay_clicked);
		}
		else
		{
			mButtonReplay.setImageResource(R.drawable.ic_action_replay);
		}
	}
	
	private static final int DEFUALT_SKIP_UNIT = 5000;
	private int mSkipUnit = DEFUALT_SKIP_UNIT; 
	private View.OnClickListener mButtonSkipClickListener = new View.OnClickListener() {
		@Override
		public void onClick(View v) {
			try {
				boolean wasPlaying = mMediaPlayer.isPlaying();
				int playOffset = mMediaPlayer.getCurrentPosition();
				int destOffset = 0;
				
				if (v.getId() == R.id.button_fast_forward) {
					destOffset = playOffset + mSkipUnit;
					if (destOffset > mMediaPlayerTotalDuration) {
						destOffset = mMediaPlayerTotalDuration;
					}
					Log.v(TAG, "Fast Forward clicked > Forwarding to " + destOffset);
				}
				else { // v.getId() == R.id.button_rewind
					destOffset = playOffset - mSkipUnit;
					if (destOffset < 0) {
						destOffset = 0;
					}
					Log.v(TAG, "Rewind clicked > Rewinding to " + destOffset);
				}
				mMediaPlayer.seekTo(destOffset);
				if (wasPlaying == true) {
					mMediaPlayer.start();
				}
				else {
					updateTimeProgress();
				}	
			} catch (Exception e)
			{
				e.printStackTrace();
			}
			
		}
	};

	
		
	@Override
	public void onCompletion(MediaPlayer mp) {
		try {
			Log.v(TAG, "onCompletion()");
			mMediaPlayer.start();
			mMediaPlayer.pause();
			updatePlayPauseButtonImage();
			cancelUpdateTimeProgressAsyncTask();
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private void initializeMediaPlayer()
	{
		try {
			Log.v(TAG, "initializeMediaPlayer()");
			
			mMediaPlayer = new MediaPlayer();
			mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
			Uri mediaFileUri = Uri.parse("android.resource://"
					+ MusicPlayerActivity.this.getPackageName() + "/"
					+ R.raw.preview_temandoflores);
			mMediaPlayer.setDataSource(MusicPlayerActivity.this, mediaFileUri);
			mMediaPlayer.setOnCompletionListener(this);

			Log.v(TAG, "... prepare, start, pause");
			mMediaPlayer.prepare();
			mMediaPlayer.start();
			mMediaPlayer.pause();
			
			mMediaPlayerTotalDuration = mMediaPlayer.getDuration();
			Log.v(TAG, " ... getDuration " + mMediaPlayerTotalDuration);
			
			mTextViewTimeProgress.setText(R.string.string_initial_time);
			mTextViewTimeTotal.setText(timeToString(mMediaPlayerTotalDuration));
			mTextViewTitle.setText("Te Mando Flores");
			
			mMediaPlayerIsPlaying = mMediaPlayer.isPlaying();
			mMediaPlayerIsLooping = mMediaPlayer.isLooping();
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private void updateMediaPlayerStatus()
	{
		try {
			mMediaPlayerCurrentPosition = mMediaPlayer.getCurrentPosition();
			mMediaPlayerIsPlaying = mMediaPlayer.isPlaying();
			mMediaPlayerIsLooping = mMediaPlayer.isLooping();
			
			updateTimeProgress();
			updatePlayPauseButtonImage();
			updateReplayButtonImage();
			if (mMediaPlayerIsPlaying)
			{
				createUpdateTimeProgressAsyncTask();
			}
			else
			{
				cancelUpdateTimeProgressAsyncTask();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static String timeToString(int aMSecond)
	{
		int aSecond, hours, remainder, mins, secs;
		aSecond = aMSecond / 1000;
		if (aSecond >= 3600) 
		{
			hours = (int) aSecond / 3600;
			remainder = (int) aSecond - hours * 3600;
		}
		else
		{
			hours = 0;
			remainder = (int) aSecond;
		}
		if (remainder >= 60)
		{
			mins = (int) remainder / 60;
			secs = (int) remainder - mins * 60;
		}
		else
		{
			mins = 0;
			secs = remainder;
		}	    

	    //int[] ints = {hours , mins , secs};
		Log.v(TAG, "timeToString " + aSecond + " to " + hours + ":" + mins + ":" + secs);
	    return String.format(Locale.getDefault(), "%02d:%02d:%02d", hours, mins, secs);
	}
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_music_player);
		
		mTextViewTitle = (TextView) findViewById(R.id.textview_title);
		mTextViewTimeProgress = (TextView) findViewById(R.id.textview_time_progress);
		mTextViewTimeTotal = (TextView) findViewById(R.id.textview_time_total);

		initializeMediaPlayer();
		
		mButtonPlayPause = (ImageButton) findViewById(R.id.button_play_pause);
		mButtonPlayPause.setOnClickListener(mButtonPlayPauseClickListener);
		
		mButtonStop = (ImageButton) findViewById(R.id.button_stop);
		mButtonStop.setOnClickListener(mButtonStopClickListener);
		
		mButtonFastForward = (ImageButton) findViewById(R.id.button_fast_forward);
		mButtonFastForward.setOnClickListener(mButtonSkipClickListener);
		
		mButtonRewind = (ImageButton) findViewById(R.id.button_rewind);
		mButtonRewind.setOnClickListener(mButtonSkipClickListener);
		
		mButtonReplay = (ImageButton) findViewById(R.id.button_replay);
		mButtonReplay.setOnClickListener(mButtonReplayClickListener);
		
		updateMediaPlayerStatus();
	}

	@Override
	protected void onDestroy() {
		if (mMediaPlayer != null) {
			try {
				if (mMediaPlayer.isPlaying()) {
					mMediaPlayer.stop();
				}
			} catch (Exception e) {
				// Do nothing
			}
			mMediaPlayer.release();
			mMediaPlayer = null;
		}
		super.onDestroy();
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.music_player, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
	
	UpdateTimeProgressAsyncTask mUpdateTimeProgressAsyncTask;
	private void createUpdateTimeProgressAsyncTask ()
	{
		if (mUpdateTimeProgressAsyncTask == null)
		{
			Log.v(TAG, "createUpdateTimeProgressAsyncTask");
			mUpdateTimeProgressAsyncTask = new UpdateTimeProgressAsyncTask();
			mUpdateTimeProgressAsyncTask.execute(MusicPlayerActivity.this, null, null);
		}
	}
	
	private void cancelUpdateTimeProgressAsyncTask ()
	{
		if (mUpdateTimeProgressAsyncTask != null)
		{
			Log.v(TAG, "cancelUpdateTimeProgressAsyncTask");
			mUpdateTimeProgressAsyncTask.cancel(true);
			mUpdateTimeProgressAsyncTask = null;
		}
	}
	class UpdateTimeProgressAsyncTask extends AsyncTask<MusicPlayerActivity, Void, Void> {
		
		MusicPlayerActivity mActivity;
				
		@Override
		protected Void doInBackground (MusicPlayerActivity... params)
		{
			mActivity = params[0];
			int i = 0;
			
			while (!isCancelled())
			{
				i++;
				if (i % 10000 == 0)
				{
					publishProgress();
					i = 0;
				}
			}
			
			return null;
		}
		
		@Override
		protected void onProgressUpdate (Void... values)
		{
			if (!isCancelled())
			{
				// Log.v(TAG, "onProgressUpdate()");
				if (mMediaPlayer.isPlaying() == true)
				{
					updateTimeProgress();
				}
				else
				{
					updatePlayPauseButtonImage();
					cancelUpdateTimeProgressAsyncTask();
				}
			}
			super.onProgressUpdate(values);
		}
		
	}
}
